'use strict';function encodeAchvReq($form){    const formData = {};    let chals = [],sps = [],chalsps = [], achvs = [];    formData['reqChallenges'] = [];    formData['reqSports'] = [];    formData['reqChalsp'] = [];    formData['reqAchievements'] = [];    let requirements = 0;    let pair = [];    for (let fieldData of $form.serializeArray()) {        if(fieldData.name === 'name' || fieldData.name === 'type')            formData[fieldData.name] = fieldData.value;        else if (fieldData.value !== "") {            if (fieldData.name === 'achievement' && !achvs.includes(fieldData.value)) {                formData['reqAchievements'].push(fieldData.value);                achvs.push(fieldData.value);                ++requirements;            }            else {                if (fieldData.name === 'challenge' && !chals.includes(fieldData.value)) {                    pair = [];                    pair.push(fieldData.value);                }                else if (fieldData.name === 'challenge_count' && pair.length !== 0 && fieldData.value > 0) {                    chals.push(pair[0]);                    pair.push(fieldData.value);                    formData['reqChallenges'].push(pair);                    pair = [];                    ++requirements;                }                else if (fieldData.name == 'sport' && !sps.includes(fieldData.value)) {                    pair = [];                    pair.push(fieldData.value);                }                else if (fieldData.name == 'sport_count' && pair.length != 0 && fieldData.value > 0) {                    sps.push(pair[0]);                    pair.push(fieldData.value);                    formData['reqSports'].push(pair);                    pair = [];                    ++requirements;                }                else if (fieldData.name == 'chal') {                    pair = [];                    pair.push(fieldData.value);                }                else if (fieldData.name == 'sp' && pair.length != 0 && !chalsps.includes((pair[0], fieldData.value))) {                    chalsps.push((pair[0], fieldData.value));                    pair.push(fieldData.value);                    formData['reqChalsp'].push(pair);                    pair = [];                    ++requirements;                }            }        }        else            pair = [];    }    formData['requirements'] = requirements;    return formData;}function decodeAchvReq($data){    let reqs = {};    console.log($data);    for(let key in $data){        reqs[key] = {};        handler(reqs, key, 'chals', $data[key]['reqChallenges']);        handler(reqs, key, 'sps', $data[key]['reqSports']);        handler(reqs, key, 'chalsps', $data[key]['reqChalSp']);        handler(reqs, key, 'achvs', $data[key]['reqAchievements'], false);        reqs[key]['type'] = $data[key]['type'];        reqs[key]['name'] = $data[key]['name'];    }    console.log(reqs);    return reqs;}function handler($target, keyInner, keyOuter, $data){    let reqs = [];    for (let req of $data) {        reqs.push({ key: req[0], val: req[1] });    }    $target[keyInner][keyOuter] = reqs !== [] ? reqs : null;}