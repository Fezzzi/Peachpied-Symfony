'use strict';(function(window, $, Routing, swal) {    class AchievementLogApp {        constructor($wrapper, $middleColumn) {            this.$wrapper = $wrapper;            this.$middleWrapper = $middleColumn;            this.reqs = {'chal': 1, 'sp': 1, 'chalsp': 1, 'achv': 1};            this.achvType = 0;            this.achvTypes = ['bronze', 'silver', 'gold'];            this.$wrapper.on(                'submit',                AchievementLogApp._selectors.newAchievementForm,                this.handleNewFormSubmit.bind(this)            );            this.$middleWrapper.on(                'click',                '.fa-caret-left',                this.changeAchvType.bind(this, 4)            );            this.$middleWrapper.on(                'click',                '.fa-caret-right',                this.changeAchvType.bind(this, 1)            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.newChallengeReq,                this.addChallengeReq.bind(this)            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.newAchievementReq,                this.addAchievementReq.bind(this)            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.newSportReq,                this.addSportReq.bind(this)            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.newChalSpReq,                this.addChalSpReq.bind(this)            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.deleteChallengeReq,                this.deleteReq.bind(this, 'chal')            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.deleteSportReq,                this.deleteReq.bind(this, 'sp')            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.deleteAchievementReq,                this.deleteReq.bind(this, 'achv')            );            this.$wrapper.on(                'click',                AchievementLogApp._selectors.deleteChalSpReq,                this.deleteReq.bind(this, 'chalsp')            );        }        /**         * Call like this.selectors         */        static get _selectors() {            return {                newAchievementForm: '.js-new-achievement-log-form',                newChallengeReq: '.js-new-achievement-challenge-req',                deleteChallengeReq: '#js-delete-chal-req',                newSportReq: '.js-new-achievement-sport-req',                deleteSportReq: '#js-delete-sp-req',                newAchievementReq: '.js-new-achievement-achievement-req',                deleteAchievementReq: '#js-delete-ach-req',                newChalSpReq: '.js-new-achievement-chalsp-req',                deleteChalSpReq: '#js-delete-chalsp-req'            }        }        changeAchvType(delta){            this.achvType = (this.achvType + delta) % 3;            this.$middleWrapper.find('img')[0].src = "assets/images/achievement" + this.achvTypes[this.achvType] + ".png";        }        deleteReq(counter, e){            --this.reqs[counter];            const $link = $(e.currentTarget);            console.log(e, this, this.reqs[counter]);            $link.addClass('text-danger');            $link.find('.fa')                .removeClass('fa-times')                .addClass('fa-spinner')                .addClass('fa-spin');            const $row = $link.closest('div');            setTimeout(function(){ $row.fadeOut(); }, 1000);        }        addChallengeReq(e){            if(this.reqs['chal'] < 6) {                ++this.reqs['chal'];                let row = document.getElementById('js-chal-req'),                    clone = row.cloneNode(true),                    a = clone.querySelectorAll("a"),                    number = clone.querySelectorAll("input"),                    select = clone.querySelectorAll("select");                a[0].hidden = false;                number[0].value = "";                document.getElementById('js-chal-req-adds').insertBefore(clone, null);            }        }        addSportReq(e){            if(this.reqs['sp'] < 6) {                ++this.reqs['sp'];                let row = document.getElementById('js-sp-req'),                    clone = row.cloneNode(true),                    a = clone.querySelectorAll("a"),                    number = clone.querySelectorAll("input");                a[0].hidden = false;                number[0].value = "";                document.getElementById('js-sp-req-adds').insertBefore(clone, null);            }        }        addAchievementReq(e){            if(this.reqs['achv'] < 6) {                ++this.reqs['achv'];                let row = document.getElementById('js-ach-req'),                    clone = row.cloneNode(true),                    a = clone.querySelectorAll("a");                a[0].hidden = false;                document.getElementById('js-ach-req-adds').insertBefore(clone, null);            }        }        addChalSpReq(e){            if(this.reqs['chalsp'] < 6) {                ++this.reqs['chalsp'];                let row = document.getElementById('js-chalsp-req'),                    clone = row.cloneNode(true),                    a = clone.querySelectorAll("a");                a[0].hidden = false;                document.getElementById('js-chalsp-req-adds').insertBefore(clone, null);            }        }        handleNewFormSubmit(e) {            e.preventDefault();            const $form = $(e.currentTarget);            let formData = encodeAchvReq($form);            formData ['type'] = this.achvTypes[this.achvType];            this._saveAchievementLog(formData)                .then((data) => {                    this._clearForm();                    window.location.href = window.location.href + '_logged';                }).catch((errorData) => {                this._mapErrorsToForm(errorData.errors);            });        }        _saveAchievementLog(data) {            return new Promise((resolve, reject) => {                const url = Routing.generate('achievement_new');                console.log(JSON.stringify((data)));                $.ajax({                    url,                    method: 'POST',                    data: JSON.stringify(data)                }).then((data, textStatus, jqXHR) => {                    $.ajax({                        url: jqXHR.getResponseHeader('Location')                    }).then((data) => {                        const html = successTemplate();                        const $row = $($.parseHTML(html));                        let $wrapper = $('.js-new-achv-form');                        $wrapper.hide().append($row).fadeIn();                        $('.js-achievement-log-table').remove();                        setTimeout(() =>{                            $wrapper.find('.log-success').fadeOut(() => {                                $wrapper.find('.log-success').remove();                            });                            location.reload();                        },1000);                        resolve(data);                    });                }).catch((jqXHR) => {                    const errorData = JSON.parse(jqXHR.responseText);                    reject(errorData);                });            });        }        _mapErrorsToForm(errorData) {            this._removeFormErrors();            const $form = this.$wrapper.find(AchievementLogApp._selectors.newAchievementForm);            let requirements = false;            for (let element of $form.find(':input')) {                const fieldName = $(element).attr('name');                const $wrapper = $(element).closest('.form-group');                if (errorData[fieldName] && !requirements)                {                    const $error = $('<span class="has-error js-field-error help-block js-sp-error"></span>');                    $error.html(errorData[fieldName]);                    if(fieldName === 'requirements'){                        $wrapper.closest('div').addClass('has-error');                        $wrapper.closest('div').append($error);                        requirements = true;                    }                    else {                        $wrapper.append($error);                        $wrapper.addClass('has-error');                    }                }            }        }        _removeFormErrors() {            this.$middleWrapper.find('.js-field-error').remove();            this.$middleWrapper.find('.has-error').removeClass('has-error');        }        _clearForm() {            this._removeFormErrors();            const $form = this.$wrapper.find(AchievementLogApp._selectors.newAchievementForm);            $form[0].reset();        }    }    const successTemplate = () => `        <div class="log-success">            <h3 class="alert alert-success">                <p><span class="fa fa-thumbs-up"></span><strong> Success!</strong>            </h3>        </div>    `;    window.AchievementLogApp = AchievementLogApp;})(window, jQuery, Routing, swal);