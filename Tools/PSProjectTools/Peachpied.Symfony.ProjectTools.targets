<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
	
	<PropertyGroup>
		<ProjectToolsPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)'))</ProjectToolsPath>
    <ProjectToolsAssebly>$(ProjectToolsPath)../lib/netstandard2.0/PSProjectTools.dll</ProjectToolsAssebly>
    <ProjectToolsTools>$(ProjectToolsPath)../tools/any/netstandard2.0</ProjectToolsTools>
		<ProjPath>$(MSBuildProjectDirectory)</ProjPath>
    <RestoreVendor>true</RestoreVendor>
	</PropertyGroup>

	<UsingTask TaskName="RestoreComposerLock" AssemblyFile="$(ProjectToolsAssebly)" />
	<UsingTask TaskName="GenerateVendorComposer" AssemblyFile="$(ProjectToolsAssebly)" />
	<UsingTask TaskName="GenerateSymfonyCache" AssemblyFile="$(ProjectToolsAssebly)" />
	
  <!-- Call custom targets -->
  <Target Name="RestoreVendorDir" BeforeTargets="BeforeBuild"> 
    <CallTarget Targets="TRestoreComposerLock; TGenerateVendorComposer; TGenerateSymfonyCache"/>
  </Target>

  <!-- Generate composer.lock from lockFragments packed inside nugets -->
  <Target Name="TRestoreComposerLock" Inputs="composer.json" Outputs="composer.lock">
    <RestoreComposerLock ProjPath="$(ProjPath)" LockFragments="@(LockFragments)" />
  </Target>
  
  <!-- Generate Symfony autoloaders -->
  <Target Name="TGenerateVendorComposer" 
          Condition="!Exists('$(MSBuildProjectDirectory)\vendor\autoload.php') OR !Exists('$(MSBuildProjectDirectory)\vendor\composer')">
    <GenerateVendorComposer ProjPath="$(ProjPath)" />
  </Target>

  <!-- Generate var folder with Symfony cache -->
  <Target Name="TGenerateSymfonyCache"  
          Condition="!Exists('$(MSBuildProjectDirectory)\var') OR $(ForceCacheRefresh)==true">
    <GenerateSymfonyCache />
  </Target>
  
</Project>